#!/usr/bin/env python
#
# kano-updater
#
# Copyright (C) 2015 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPL v2
#

"""
kano-updater will help you keep your Kano OS up-to-date.

Usage:
  kano-updater check [--gui]
  kano-updater download
  kano-updater install [--gui]
  kano-updater install-pip
  kano-updater reset <state>
  kano-updater [-f] [-n]

Options:
  -h, --help       Show this message.
  -v, --version    Print the version of the updater.
  -g, --gui        Run the install procedure with a GUI.
"""


import os
import sys
import gettext
import docopt

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(0, dir_path)
        locale_path = os.path.join(dir_path, 'locale')
    else:
        locale_path = None

from kano.utils import enforce_root, delete_file
from kano.logging import logger

# FIXME Move into separate module
gettext.install('kano-updater', locale_path, unicode=1)

from kano_updater.os_version import TARGET_VERSION
from kano_updater.commands.download import download
from kano_updater.commands.install import install, install_pip_packages
from kano_updater.commands.check import check_for_updates
from kano_updater.progress import CLIProgress, Relaunch
from kano_updater.status import UpdaterStatus
from kano_updater.utils import supress_output

PIP_URL = 'https://raw.github.com/pypa/pip/master/contrib/get-pip.py'

# TODO Move this somewhere else
def install_pip():
    try:
        import pip
        pip.main('install --upgrade pip'.split())
    except ImportError:
        import urllib2
        import tempfile
        import imp
        import shutil

        # pip doesn't seem to be installed, install it
        download = urllib2.urlopen(PIP_URL)
        installer_file = tempfile.NamedTemporaryFile(delete=False)
        shutil.copyfileobj(download, installer_file)
        download.close()
        installer_file.close()

        pip_installer = imp.load_source("pip_installer", installer_file.name)
        sys.argv = []
        pip_installer.main()
        delete_file(installer_file.name)


def is_already_running():
    # TODO
    return False

def run_install(gui=False):
    if gui:
        from kano_updater.ui.main import launch_install_gui
        try:
            launch_gui()
        except Relaunch:
            logger.flush()
            os.execvp('kano-updater',
                      ['kano-updater', 'install', '--gui'])
    else:
        try:
            install(progress)
        except Relaunch:
            logger.flush()
            os.execvp('kano-updater', ['kano-updater', 'install'])

def main():
    args = docopt.docopt(__doc__, version=str(TARGET_VERSION))

    # We always want to keep the logs from updates
    logger.force_log_level("info")

    if is_already_running():
        # TODO Report from status file
        msg = _('An instance of Kano Updater is already running')
        sys.stderr.write("{}: {}\n".format(_('ERROR'), msg))
        sys.exit(1)

    msg = _('Administrator priviledges are required to perform this operation')
    enforce_root("{}: {}".format(_('ERROR'), msg))

    if args['install-pip']:
        # This subcommand is intended to be run from peldins to actually
        # install the pip packages on to the image in the first place.
        supress_output(install_pip)
        install_pip_packages(progress=CLIProgress())
    elif args['reset']:
        status = UpdaterStatus.get_instance()
        status.state = args['<state>']
        status.save()
    else:
        progress = CLIProgress()

        if args['download']:
            download(progress)
        elif args['install']:
            run_install(args['--gui'])
        elif args['check']:
            if args['--gui']:
                from kano_updater.ui.main import launch_check_gui
                launch_check_gui()
            else:
                check_for_updates(progress=progress)
        else:
            # lunch the gui if no arguments were given for
            # backwards compatiblity
            run_install(True)

    return 0


if __name__ == "__main__":
    sys.exit(main())
