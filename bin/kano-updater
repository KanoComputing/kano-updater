#!/usr/bin/env python
#
# kano-updater
#
# Copyright (C) 2015 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPL v2
#

"""
kano-updater will help you keep your Kano OS up-to-date.

Usage:
  kano-updater check [--gui] [--interval <time>]
  kano-updater download [--low-prio]
  kano-updater install [--gui [--no-confirm] [--splash-pid <pid>]]
  kano-updater set-state <state>
  kano-updater boot-check [--check-for-updates]
  kano-updater relaunch-countdown
  kano-updater [-f] [-n]

Options:
  -h, --help       Show this message.
  -v, --version    Print the version of the updater.
  -g, --gui        Run the install procedure with a GUI.
  --no-confirm     Don't confirm before installing
  -l, --low-prio   Run the process with low shed and io priority.
  --interval       Minimum time interval between checks (in hours)
"""


import os
import sys
import gettext

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(0, dir_path)
        locale_path = os.path.join(dir_path, 'locale')
    else:
        locale_path = None

from kano.utils import enforce_root
from kano.logging import logger

# FIXME Move into separate module
gettext.install('kano-updater', locale_path, unicode=1)

from kano_updater.os_version import TARGET_VERSION
from kano_updater.commands.download import download
from kano_updater.commands.install import install
from kano_updater.commands.check import check_for_updates
from kano_updater.progress import CLIProgress, Relaunch
from kano_updater.status import UpdaterStatus
from kano_updater.utils import make_low_prio, install_docopt, is_running


def run_install(gui=False, confirm=True, splash_pid=None):
    if gui:
        from kano_updater.ui.main import launch_install_gui

        try:
            launch_install_gui(confirm=confirm, splash_pid=splash_pid)
        except Relaunch as relaunch_exception:
            logger.flush()
            cmd_args = ['kano-updater', 'install', '--gui', '--no-confirm']
            if relaunch_exception.pid:
                cmd_args += ['--splash-pid', str(relaunch_exception.pid)]
            os.execvp('kano-updater', cmd_args)
    else:
        try:
            progress = CLIProgress()
            install(progress)
        except Relaunch:
            logger.flush()
            os.execvp('kano-updater', ['kano-updater', 'install'])

def main():
    msg = _('Administrator priviledges are required to perform this operation')
    enforce_root("{}: {}".format(_('ERROR'), msg))

    # docopt wasn't installed by default prior Kano OS 1.3.3
    # It needs to be installed to make sure the updater runs
    install_docopt()
    import docopt

    args = docopt.docopt(__doc__, version=str(TARGET_VERSION))

    # We always want to keep the logs from updates
    logger.force_log_level('debug')

    if not args['relaunch-countdown'] and is_running():
        msg = _('An instance of Kano Updater is already running')
        logger.error(msg)
        sys.stderr.write("{}: {}\n".format(_('ERROR'), msg))
        sys.exit(1)

    if args['set-state']:
        status = UpdaterStatus.get_instance()
        status.state = args['<state>']
        status.save()
    elif args['boot-check']:
        from kano_updater.ui.main import launch_boot_check_gui
        launch_boot_check_gui(args['--check-for-updates'])
    elif args['relaunch-countdown']:
        from kano_updater.ui.main import launch_relaunch_countdown_gui
        launch_relaunch_countdown_gui()
    else:
        progress = CLIProgress()

        if args['download']:
            if args['--low-prio']:
                make_low_prio()
            download(progress)
        elif args['install']:
            splash_pid = None
            if args['--splash-pid']:
                splash_pid = int(args['<pid>'])

            run_install(gui=args['--gui'], confirm=not args['--no-confirm'],
                        splash_pid=splash_pid)
        elif args['check']:
            time = args['<time>'] if args['--interval'] else 0

            if args['--gui']:
                from kano_updater.ui.main import launch_check_gui
                launch_check_gui(min_time_between_checks=time)
            else:
                check_for_updates(min_time_between_checks=time,
                                  progress=progress)
        else:
            # Launch the GUI if no arguments were given for
            # backwards compatiblity
            run_install(gui=True, confirm=False)

    return 0


if __name__ == '__main__':
    sys.exit(main())
