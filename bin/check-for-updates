#!/usr/bin/env python

# check-for-updates
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# Checks for updates of packages that are maintained by Kano
#

KANO_LISTS = "/etc/apt/sources.list.d/kano.list"
APT_LISTS_CACHE = "/var/lib/apt/lists/"

import os
import sys
import re
import time
import argparse
import subprocess
import gettext

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.append(dir_path)
        locale_path = os.path.join(dir_path, 'locale')
    else:
        locale_path = None

gettext.install('kano-updater', locale_path, unicode=1)

from kano.utils import run_cmd, enforce_root, is_running
from kano.logging import logger
from kano_updater.utils import get_dpkg_dict, get_update_status, set_update_status

from gi.repository import Gtk
from kano.gtk3.buttons import KanoButton, OrangeButton
from kano.gtk3.heading import Heading
from kano.gtk3.apply_styles import apply_common_to_screen

update_image = "/usr/lib/python2.7/dist-packages/kano_updater_gui/media/images/update-screen.png"


class MainWindow(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title=_('New Update'))

        apply_common_to_screen()

        self.image_width = 590
        self.image_height = 270
        self.window_height = 500
        self.set_size_request(self.image_width, self.window_height)
        self.set_decorated(False)
        self.set_resizable(False)
        self.set_position(Gtk.WindowPosition.CENTER)
        
        self.set_icon_name("kano-updater")

        # Make sure this window is always above
        self.set_keep_above(True)

        # Header
        self.heading = Heading(_("Time to update!"), _("Take a break! Updating takes about 15 minutes"))
        self.heading.description.set_line_wrap(True)

        self.button = KanoButton(_("Update now").upper())
        self.button.connect("clicked", self.update)
        self.later = OrangeButton(_("Later"))
        self.later.connect("clicked", Gtk.main_quit)
        self.button_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=15)
        self.button_box.pack_start(self.button, False, False, 0)
        self.button_box.pack_start(self.later, False, False, 0)
        self.button_alignment = Gtk.Alignment(xalign=0.5, yalign=0.5, xscale=0, yscale=0)
        self.button_alignment.add(self.button_box)

        self.image = Gtk.Image()
        self.image.set_from_file(update_image)

        self.background = Gtk.EventBox()
        self.background.set_size_request(self.image_width, self.image_height)
        self.background.add(self.image)

        self.box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=0)
        self.box.pack_start(self.background, False, False, 0)
        self.box.pack_start(self.heading.container, False, False, 10)
        self.box.pack_start(self.button_alignment, False, False, 0)

        self.add(self.box)

    def update(self, widget, event):
        global run_updater

        if not hasattr(event, 'keyval') or event.keyval == 65293:
            run_updater = True
            self.destroy()
            Gtk.main_quit()


def display_gui():
    logger.debug('Showing update dialog')

    win = MainWindow()
    win.connect('delete-event', Gtk.main_quit)
    win.show_all()
    Gtk.main()

    if run_updater:
        logger.info('running updater')
        subprocess.call(['/usr/bin/kano-updater', '-f'])


def check_for_multiple_instances():
    if is_running("python /usr/bin/check-for-updates") > 1 or is_running("python /usr/bin/kano-updater"):
        msg = 'Exiting check-for-updates as there is an other instance already running!'
        logger.info(msg)
        sys.exit(msg)

run_updater = False

check_for_multiple_instances()

enforce_root('check-for-updates needs root!')

parser = argparse.ArgumentParser()
parser.add_argument('-d', '--dialog', action='store_true', help='display dialog')
parser.add_argument('-t', '--time', help='limit by time (hours)')
args = parser.parse_args()

if args.time:
    target_delta = float(args.time) * 60 * 60

    time_now = time.time()
    status = get_update_status()
    last_check = status["last_check"]
    delta = time_now - last_check

    if delta > target_delta:
        logger.info('Time check passed, doing update check!')
    else:
        logger.info('Not enough time passed for a new update check!')
        if args.dialog and status["update_available"]:
            display_gui()
        sys.exit()

# Check whether there is something running
#   based on the recent CPU utilisation
#

logger.info('Checking for updates')

# Download recent kano repo Package lists
cmd = ("apt-get update -o Dir::Etc::sourcelist='{}' " +
       "-o Dir::Etc::sourceparts'=-' " +
       "-o APT::Get::List-Cleanup='0'").format(KANO_LISTS)
_, _, rc = run_cmd(cmd)
if rc != 0:
    logger.debug('apt-get update problems, exiting')
    sys.exit()

# Get versions of all the packages in the repo
pkgs_ok, pkgs_err = get_dpkg_dict()
installed_pkgs = dict(pkgs_ok.items() + pkgs_err.items())

# Parse the list and compare with the dict and
list_files = os.listdir(APT_LISTS_CACHE)
kano_pkg_lists = filter(lambda f: re.search(r"kano", f) and re.search(r"Packages$", f), list_files)

# Parse the package list
pkg_list = {}
for pkg_list_filename in kano_pkg_lists:
    with open(APT_LISTS_CACHE + pkg_list_filename, "r") as pkg_list_file:
        package = None
        version = None
        for line in pkg_list_file.readlines():
            if re.match("Package: ", line):
                package = line[9:-1]
            elif re.match("Version: ", line):
                version = line[9:-1]

                if not package:
                    logger.error("Malformed package lists, filename: {}".format(pkg_list_filename))
                else:
                    if package not in pkg_list or \
                       (package in pkg_list and version > pkg_list[package]):
                        pkg_list[package] = version

                package = None
                version = None

status = get_update_status()
status["last_check"] = int(time.time())

updates_found = False

# Compare the package list to dpkg -l
for pkg, version in installed_pkgs.iteritems():
    if pkg in pkg_list and version < pkg_list[pkg]:
        updates_found = True

# no updates found, write status and exit
if not updates_found:
    logger.info("No updates detected")
    status["update_available"] = 0
    set_update_status(status)
    sys.exit()

# updates found, saving update_available state
else:
    logger.info("Updates available")
    status["update_available"] = 1
    set_update_status(status)

    # displaying dialog if needed
    if args.dialog:
        display_gui()


