#!/usr/bin/env python
#
# kano-updater
#
# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPL v2
#

"""
kano-updater will help you keep your Kano OS up-to-date.

Usage:
  kano-updater check
  kano-updater download
  kano-updater install
  kano-updater install-pip

Options:
  -h, --help       Show this message.
  -v, --version        Print the version of the updater.
"""


import os
import sys
import gettext
import docopt
import urllib2
import tempfile
import imp
import shutil

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(0, dir_path)
        locale_path = os.path.join(dir_path, 'locale')
    else:
        locale_path = None

from kano.utils import enforce_root, delete_file

from kano_updater.version import version as updater_version
from kano_updater.commands.download import download
from kano_updater.commands.install import install, install_pip_packages

gettext.install('kano-updater', locale_path, unicode=1)

PIP_URL = 'https://raw.github.com/pypa/pip/master/contrib/get-pip.py'

def install_pip():
    try:
        import pip
        pip.main('install --upgrade pip'.split())
    except ImportError:
        # pip doesn't seem to be installed, install it
        download = urllib2.urlopen(PIP_URL)
        installer_file = tempfile.NamedTemporaryFile(delete=False)
        shutil.copyfileobj(download, installer_file)
        download.close()
        installer_file.close()

        pip_installer = imp.load_source("pip_installer", installer_file.name)
        sys.argv = []
        pip_installer.main()
        delete_file(installer_file.name)


def main():
    args = docopt.docopt(__doc__, version=updater_version)

    msg = _('Administrator priviledges are required to perform this operation')
    enforce_root("{}: {}".format(_('ERROR'), msg))

    if args['download']:
        download()
    elif args['install']:
        install()
    elif args['check']:
        check_for_updates()
    elif args['install-pip']:
        # This subcommand is intended to be run from peldins to actually
        # install the pip packages on to the image in the first place.
        install_pip()
        install_pip_packages()

    return 0


if __name__ == "__main__":
    sys.exit(main())
