#!/usr/bin/env python
#
# kano-empty-trash
#
# Copyright (C) 2015 - 2018 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# When run as a user, deletes their trash. When run as root, empties the trash of each user in
# group 'kanousers' and additionaly it cleans the old core dump files.

import os
import shutil
import sys
from datetime import datetime, timedelta
from kano.utils import run_cmd
from kano.logging import logger
from kano_settings.system.get_username import get_real_users, pwd_field_id

COREDUMP_DIR = "/var/tmp"

def onerror(fn, path, excinfo):
    logger.error('error deleting {}'.format(path))

def empty_user_trash(path):
    trash_dir = os.path.join(path, '.local', 'share', 'Trash')
    if os.path.exists(trash_dir):
        shutil.rmtree(trash_dir, False, onerror)

def empty_all_trash():
    '''
    Delete all trash directories.
    This function must be run as root.
    '''

    # Start by enumerating all users
    path = '/home'
    users = get_real_users()

    for user in users:
        uid = user[pwd_field_id['pw_uid']]
        uname = user[pwd_field_id['pw_name']]
        # Must set home dir. Also set SUDO_USER to avoid problem with logger:
        # it thinks it must be root if sudo is in effect, but this is not the case here.
        os.system('sudo -H -u#{} SUDO_USER={} /usr/bin/kano-empty-trash '.format(uid, uname))

def clean_old_dumps(dir_, age):
    '''
    Cleans the core dump files which are set by the kernel.core_pattern

    Args:
        dir_ (str): This is where core dump files live.
        age (int): List files older than age days old.
    Raises:
        OSError: Raised if the core dump dir_ isn there

    TODO:
        * Get the coredump_dir directly from an environment variable or through
        the configuration file of kernel.core_pattern
    '''
    now = datetime.now()

    if not dir_:
        raise AttributeError
    else:
        for file_ in os.listdir(dir_):
            full_path = os.path.join(dir_, file_)
            mtime = datetime.fromtimestamp(os.path.getmtime(file_))
            if (file_.endswith('.dump') or file_.endswith('.dump.gz')) and \
            ((now - mtime) > timedelta(days=age)) and os.path.isfile(full_path):
                try:
                    os.remove(full_path)
                except OSError, e:
                    logger.error('Cannot delete:{} . {}'.format(e.filename, e.strerror))

if __name__ == '__main__':
    if os.getuid():
        if os.environ.has_key('HOME'):
            empty_user_trash(os.environ['HOME'])
        else:
            logger.error('HOME unset')
        sys.exit(0)
    else:
        empty_all_trash()
        try:
            clean_old_dumps(COREDUMP_DIR, 5)
        except AttributeError:
            logger.error('Unable to delete core dumps. Check directory.')
        sys.exit(0)
