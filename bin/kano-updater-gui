#!/usr/bin/env python

# kano-updater-gui
#
# Copyright (C) 2014-2015 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#
# Main window class
#

from gi.repository import Gtk, GObject
GObject.threads_init()
import threading
import os
import time
import sys
import gettext
from kano.gtk3.apply_styles import apply_styling_to_screen

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)
        locale_path = os.path.join(dir_path, 'locale')
    else:
        locale_path = None

gettext.install('kano-updater', locale_path, unicode=1)

from kano_updater_gui.paths import IMAGE_PATH, CSS_PATH
from kano_updater_gui.text import NUMBER_OF_STAGES
from kano_updater_gui.header import Header
from kano_updater_gui.stage import stage


tmp_filename = "/tmp/updater-progress"

# note: current_number is the stage stored in tmp_filename minus one!
current_number = 0
exit = False


class WorkerThread(threading.Thread):
    def __init__(self, callback):
        threading.Thread.__init__(self)
        self.callback = callback

    def run(self):
        self.check_file()
        # Check the /tmp/ file for a change in the file
        # The callback runs a GUI task, so wrap it!
        GObject.idle_add(self.callback)

    def check_file(self):
        global current_number
        number = current_number

        while True:
            try:
                with open(tmp_filename) as f:
                    number = f.read()
            except IOError:
                with open(tmp_filename, "w+") as f:
                    number = "1"
                    f.write(number)

            if not number == str(current_number + 1) and number.isdigit():
                current_number = int(number) - 1
                if current_number < 0:
                    current_number = 0
                elif current_number > NUMBER_OF_STAGES:
                    current_number = NUMBER_OF_STAGES
                return
            # This is here so on closing window, we can tell this function to exit
            if exit:
                os.remove(tmp_filename)
                return
            # Seems to speed up the process
            time.sleep(2)


class MainWindow(Gtk.Window):
    CSS_FILE = os.path.join(CSS_PATH, "updater.css")

    def __init__(self):
        # Apply styling to window
        apply_styling_to_screen(self.CSS_FILE)

        Gtk.Window.__init__(self)
        self.set_resizable(False)
        self.set_position(Gtk.WindowPosition.CENTER)
        self.set_decorated(False)
        # Make sure this window is always above
        self.set_keep_above(True)

        self.set_icon_name("kano-updater")
        self.set_title(_("Updater"))

        grid = Gtk.Grid()

        self.headers = []
        self.stage_boxes = []
        self.stage_labels = []
        self.stage_checkmarks = []
        self.stage_spinners = []

        self.headerstack = Gtk.Stack(
            transition_type = Gtk.StackTransitionType.SLIDE_LEFT_RIGHT,
            transition_duration = 500
        )
        grid.attach(self.headerstack, 0, 0, NUMBER_OF_STAGES, 1)

        for i in range(NUMBER_OF_STAGES + 1):
            header = Header(i)
            self.headerstack.add(header)
            self.headers.append(header)

        for i in range(NUMBER_OF_STAGES):
            (box, label, checkmark, spinner) = stage(i)
            grid.attach(box, i, 1, 1, 1)
            self.stage_boxes.append(box)
            self.stage_labels.append(label)
            self.stage_checkmarks.append(checkmark)
            self.stage_spinners.append(spinner)

        self.add(grid)

        self.show_all()
        self.set_stages(current_number)

        self.start_spinner()

    def set_stage_state(self, number, state):
        for s in ["waiting", "working", "completed"]:
            if s == state:
                self.stage_boxes[number].get_style_context().add_class(s)
                self.stage_labels[number].get_style_context().add_class(s)
                self.stage_checkmarks[number].set_from_file(
                    os.path.join(IMAGE_PATH, "{}.png".format(s)))
            else:
                self.stage_boxes[number].get_style_context().remove_class(s)
                self.stage_labels[number].get_style_context().remove_class(s)
        if state == "working":
            self.stage_spinners[number].show()
            self.stage_spinners[number].start()
        else:
            self.stage_spinners[number].stop()
            self.stage_spinners[number].hide()

    def start_spinner(self):
        thread = WorkerThread(self.work_finished)
        thread.start()

    # when work is finished, spinner will stop
    def work_finished(self):
        self.set_stages(current_number)
        self.start_spinner()

    # number is the current working state (1-7) minus one (0-6)!
    def set_stages(self, number):
        self.headerstack.set_visible_child(self.headers[number])

        for i in range(NUMBER_OF_STAGES):
            if i < number:
                self.set_stage_state(i, "completed")
            elif i == number:
                self.set_stage_state(i, "working")
            else:
                self.set_stage_state(i, "waiting")

        self.show()

    def close_window(self, widget, event):
        global exit

        exit = True
        Gtk.main_quit()


def main():
    win = MainWindow()
    win.connect("delete-event", win.close_window)
    win.show()
    Gtk.main()


if __name__ == "__main__":
    main()
